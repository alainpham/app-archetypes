<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>${groupId}</groupId>
  <artifactId>${artifactId}</artifactId>
  <version>${version}</version>
  <properties>
    <compiler-plugin.version>${compiler-plugin-version}</compiler-plugin.version>
    <maven.compiler.release>${maven-compiler-release}</maven.compiler.release>
    <project.build.sourceEncoding>${project-build-sourceEncoding}</project.build.sourceEncoding>
    <project.reporting.outputEncoding>${project-reporting-outputEncoding}</project.reporting.outputEncoding>
    <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
    <quarkus.platform.group-id>io.quarkus.platform</quarkus.platform.group-id>
    <quarkus.platform.version>${quarkus-version}</quarkus.platform.version>
    <surefire-plugin.version>${surefire-plugin-version}</surefire-plugin.version>
    <exec-maven-plugin.version>${exec-maven-plugin-version}</exec-maven-plugin.version>
    <temurin.image.version>${temurin-image-version}</temurin.image.version>

    <container.registry>${container-registry}</container.registry>
    <kube.ingress.root.domain>${kube-ingress-root-domain}</kube.ingress.root.domain>
    <skipITs>true</skipITs>
  </properties>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>${quarkus.platform.artifact-id}</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>quarkus-camel-bom</artifactId>
        <version>${quarkus.platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-xml-io-dsl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-direct</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-timer</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-log</artifactId>
    </dependency>
    
    <!-- observability -->
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-microprofile-health</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-micrometer</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-opentelemetry</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-opentelemetry</artifactId>
  </dependency>

    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-platform-http</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-rest-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-websockets</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-rest</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-openapi-java</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-bean</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-vertx-websocket</artifactId>
  </dependency>
    <dependency>
      <groupId>org.apache.camel.quarkus</groupId>
      <artifactId>camel-quarkus-seda</artifactId>
    </dependency>
  </dependencies>
  <build>
    <defaultGoal>quarkus:dev</defaultGoal>
    <plugins>
      <plugin>
        <groupId>${quarkus.platform.group-id}</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
        <version>${quarkus.platform.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
              <goal>generate-code</goal>
              <goal>generate-code-tests</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${compiler-plugin.version}</version>
        <configuration>
          <compilerArgs>
            <arg>-parameters</arg>
          </compilerArgs>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${surefire-plugin.version}</version>
        <configuration>
          <systemPropertyVariables>
            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
            <maven.home>${maven.home}</maven.home>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${surefire-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <systemPropertyVariables>
                <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>
                <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                <maven.home>${maven.home}</maven.home>
              </systemPropertyVariables>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <executions>
            <execution>
                <id>rmi</id>
                <goals>
                    <goal>exec</goal>
                </goals>
                <configuration>
                    <executable>docker</executable>
                    <workingDirectory>${project.basedir}</workingDirectory>
                    <arguments>
                        <argument>rmi</argument>
                        <argument>-f</argument>
                        <argument>${project.artifactId}:${project.version}</argument>
                    </arguments>
                </configuration>
            </execution>
            <execution>
                <!-- docker buildx build -f src/main/docker/Dockerfile -t story:1.0-SNAPSHOT . -->
                <id>build</id>
                <goals>
                    <goal>exec</goal>
                </goals>
                <configuration>
                    <executable>docker</executable>
                    <workingDirectory>${project.basedir}</workingDirectory>
                    <arguments>
                        <argument>buildx</argument>
                        <argument>build</argument>
                        <argument>--progress=plain</argument>
                        <argument>--build-arg</argument>
                        <argument>PROJECT_ARTIFACTID=${project.artifactId}</argument>
                        <argument>--build-arg</argument>
                        <argument>PROJECT_VERSION=${project.version}</argument>
                        <argument>--build-arg</argument>
                        <argument>TEMURIN_IMAGE_VERSION=${temurin.image.version}</argument>
                        <argument>-f</argument>
                        <argument>src/main/docker/Dockerfile</argument>
                        <argument>-t</argument>
                        <argument>${project.artifactId}:${project.version}-${os.arch}</argument>
                        <argument>.</argument>
                    </arguments>
                </configuration>
            </execution>
            <execution>
                <id>tag</id>
                <goals>
                    <goal>exec</goal>
                </goals>
                <configuration>
                    <executable>docker</executable>
                    <workingDirectory>${project.basedir}</workingDirectory>
                    <arguments>
                        <argument>tag</argument>
                        <argument>${project.artifactId}:${project.version}</argument>
                        <argument>${container.registry}/${project.artifactId}:${project.version}-${os.arch}</argument>
                    </arguments>
                </configuration>
            </execution>
            <execution>
                <id>push</id>
                <goals>
                    <goal>exec</goal>
                </goals>
                <configuration>
                    <executable>docker</executable>
                    <workingDirectory>${project.basedir}</workingDirectory>
                    <arguments>
                        <argument>push</argument>
                        <argument>${container.registry}/${project.artifactId}:${project.version}-${os.arch}</argument>
                    </arguments>
                </configuration>
            </execution>
            <execution>
                <id>buildpush</id>
                <goals>
                    <goal>exec</goal>
                </goals>
                <configuration>
                    <executable>docker</executable>
                    <workingDirectory>${project.basedir}</workingDirectory>
                    <arguments>
                        <argument>buildx</argument>
                        <argument>build</argument>
                        <argument>--platform</argument>
                        <argument>linux/amd64,linux/arm/v7,linux/arm64/v8</argument>
                        <argument>--push</argument>
                        <argument>--progress=plain</argument>
                        <argument>--build-arg</argument>
                        <argument>PROJECT_ARTIFACTID=${project.artifactId}</argument>
                        <argument>--build-arg</argument>
                        <argument>PROJECT_VERSION=${project.version}</argument>
                        <argument>--build-arg</argument>
                        <argument>TEMURIN_IMAGE_VERSION=${temurin.image.version}</argument>
                        <argument>-f</argument>
                        <argument>src/main/docker/Dockerfile</argument>
                        <argument>-t</argument>
                        <argument>${container.registry}/${project.artifactId}:${project.version}</argument>
                        <argument>.</argument>
                    </arguments>
                </configuration>
            </execution>
            <execution>
                <id>kdelete</id>
                <goals>
                    <goal>exec</goal>
                </goals>
                <configuration>
                    <executable>bash</executable>
                    <workingDirectory>${project.basedir}</workingDirectory>
                    <arguments>
                        <argument>-c</argument>
                        <argument><![CDATA[envsubst < src/main/kube/deploy.envsubst.yaml | kubectl delete -f -]]></argument>
                    </arguments>
                    <environmentVariables>
                        <PROJECT_ARTIFACTID>${project.artifactId}</PROJECT_ARTIFACTID>
                        <PROJECT_VERSION>${project.version}</PROJECT_VERSION>
                        <CONTAINER_REGISTRY>${container.registry}</CONTAINER_REGISTRY>
                        <KUBE_INGRESS_ROOT_DOMAIN>${kube.ingress.root.domain}</KUBE_INGRESS_ROOT_DOMAIN>
                    </environmentVariables>
                </configuration>
            </execution>
            <execution>
                <id>kdeploy</id>
                <goals>
                    <goal>exec</goal>
                </goals>
                <configuration>
                    <executable>bash</executable>
                    <workingDirectory>${project.basedir}</workingDirectory>
                    <arguments>
                        <argument>-c</argument>
                        <argument><![CDATA[envsubst < src/main/kube/deploy.envsubst.yaml | kubectl apply -f -]]></argument>
                    </arguments>
                    <environmentVariables>
                        <PROJECT_ARTIFACTID>${project.artifactId}</PROJECT_ARTIFACTID>
                        <PROJECT_VERSION>${project.version}</PROJECT_VERSION>
                        <CONTAINER_REGISTRY>${container.registry}</CONTAINER_REGISTRY>
                        <KUBE_INGRESS_ROOT_DOMAIN>${kube.ingress.root.domain}</KUBE_INGRESS_ROOT_DOMAIN>
                    </environmentVariables>
                </configuration>
            </execution>
        </executions>
    </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>native</id>
      <activation>
        <property>
          <name>native</name>
        </property>
      </activation>
      <properties>
        <skipITs>false</skipITs>
        <quarkus.package.type>native</quarkus.package.type>
        <quarkus.native.container-build>true</quarkus.native.container-build>
        <quarkus.native.additional-build-args>-H:ReflectionConfigurationFiles=reflection-config.json</quarkus.native.additional-build-args>
      </properties>
    </profile>
  </profiles>
</project>
